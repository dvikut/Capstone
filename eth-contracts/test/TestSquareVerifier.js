// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require('Verifier');
// - use the contents from proof.json generated from zokrates steps
let data = require('../../zokrates/code/square/proof.json');
let proof = data.proof;
let inputs = data.inputs;
let wrongInputs = [
    "0x0000000100000000000010000000010000000000000000010000000000000009"
  ]
    
contract('Verifier', accounts => {
    const account = accounts[0];

    describe('verifier test', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({ from: account });
        });

        // Test verification with correct proof
        it('correct proof test', async function () {
            let result = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, inputs);
            assert.equal(result, true, "Proof failed");
        })

        // Test verification with incorrect proof
        it('incorrect proof test', async function () {
            let result = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, wrongInputs);
            assert.equal(result, false, "Proof passed but it's wrong");
        });
    });
})
